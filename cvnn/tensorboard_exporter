import glob
import plotly
import numpy as np
from pathlib import Path
from pdb import set_trace
from cvnn.data_analysis import PLOTLY_CONFIG, DEFAULT_PLOTLY_COLORS, add_transparency, triangulate_histogram
import plotly.graph_objects as go
from tensorflow import make_ndarray
from tensorflow.python.summary.summary_iterator import summary_iterator


class TensorboardExporter:

    def __init__(self, inpath):
        self.dict_list = []
        self.path = Path(inpath)
        for event_file in glob.glob(inpath + 'events*'):
            for e in summary_iterator(event_file):
                for v in e.summary.value:
                    arr = make_ndarray(v.tensor)
                    self.dict_list.append(
                        {
                            "tag": v.tag,
                            "step": e.step,
                            "interval": (arr[:, 0], arr[:, 1]),
                            "value": arr[:, 2]
                        }
                    )

    def plot_3d_hist(self, key):
        fig = go.Figure()
        for i, hist in enumerate(self.dict_list):
            if hist["tag"] == key:
                counts = hist["value"]
                bins = (hist["interval"][0] + hist["interval"][1]) / 2
                counts = list(np.repeat(counts, 2).tolist())
                counts.insert(0, 0)
                counts.append(0)
                bins = list(np.repeat(bins, 2))
                bins.append(hist["interval"][1][-1])
                bins.insert(0, hist["interval"][0][0])
                step = hist["step"]

                fig.add_traces(go.Scatter3d(x=[step] * len(counts), y=bins, z=counts,
                                            mode='lines', name=hist["tag"].replace("_", " ") + "; step: " + str(step),
                                            surfacecolor=add_transparency(DEFAULT_PLOTLY_COLORS[0], 0),
                                            # surfaceaxis=0,
                                            line=dict(color=DEFAULT_PLOTLY_COLORS[0], width=4)
                                            )
                               )
                # set_trace()
                """verts, tri = triangulate_histogram([step] * len(counts), bins, counts)
                x, y, z = verts.T
                I, J, K = tri.T
                fig.add_traces(go.Mesh3d(x=x, y=y, z=z, i=I, j=J, k=K, color=DEFAULT_PLOTLY_COLORS[0], opacity=0.4))"""

        fig.update_layout(title=key,
                          scene=dict(
                              xaxis=dict(title='step'),
                              yaxis=dict(title=key),
                              zaxis=dict(title='counts'),
                              # xaxis_type="log"
                          ))
        plotly.offline.plot(fig, filename=str(self.path / (key + "_3d_histogram.html")),
                            config=PLOTLY_CONFIG, auto_open=True)


if __name__ == "__main__":
    path = "log\\models\\2020\\05May\\28Thursday\\run-12h38m55\\tensorboard_logs\\weights\\"
    exporter = TensorboardExporter(path)
    exporter.plot_3d_hist("ComplexDense_0_w_real")
    # set_trace()
