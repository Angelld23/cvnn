Correlated Noise
----------------

.. note:: This results are based on the paper `published here <https://arxiv.org/abs/2009.08340>`_ [CIT2020-BARRACHINA]_. Information about the network models and the dataset can be found there.

This results can be replicated by running the following code (changing the input parameters when it corresponds)::

        from cvnn.montecarlo import run_gaussian_dataset_montecarlo

        run_gaussian_dataset_montecarlo(iterations=1000, m=10000, n=128, param_list=None,
                                        epochs=150, batch_size=100, display_freq=1, optimizer='Adam',
                                        shape_raw=None, activation='cart_relu', debug=False, 
                                        polar=False, do_all=True, dropout=None)


.. note:: Results will be differents to those published on the report because of the following items
    
    - Since version 0.2.89 the default real mlp model changed.
    - Default optimizer was sgd and not adam.
    - Since version 0.3.48 cvnn started using TensorFlow optimizer which averages gradients by it's batch size according to `this post <https://stackoverflow.com/questions/66566905/debugging-tensorflow-fit-not-making-sense/>`_

**Simulation Results**

.. toctree::
    :maxdepth: 1

    base_case_type_a_2hl
    base_case_type_a_1hl
    no_dropout_type_a_1hl

**Method Documentation**

.. py:method:: run_gaussian_dataset_montecarlo(iterations=1000, m=10000, n=128, param_list=None, epochs=150, batch_size=100, display_freq=1, optimizer='Adam', validation_split=0.2, shape_raw=None, activation='cart_relu', debug=False, polar=False, do_all=True, dropout=None)

    This function is used to compare CVNN vs RVNN performance over statistical non-circular data.
    
    1. Generates a complex-valued gaussian correlated noise with the characteristics given by the inputs.
    2. It then runs a monte carlo simulation of several iterations of both CVNN and an equivalent RVNN model.
    3. Saves several files into :code:`./log/montecarlo/date/of/run/`

        - :code:`run_summary.txt`: Summary of the run models and data
        - :code:`run_data.csv`: Full information of performance of iteration of each model at each epoch
        - :code:`complex_network_statistical_result.csv`: Statistical results of all iterations of CVNN per epoch
        - :code:`real_network_statistical_result.csv`: Statistical results of all iterations of RVNN per epoch
        - (Optional) :code:`plot/` folder with the corresponding plots generated by :code:`MonteCarloAnalyzer.do_all()`
    
    :param iterations: Number of iterations to be done for each model
    :param m: Total size of the dataset (number of examples)
    :param n: Number of features / input vector
    :param param_list: A list of len = number of classes.
        Each element of the list is another list of len = 3 with values: [:math:`\rho`, :math:`\sigma_x^2`, :math:`\sigma_y^2`]
        Example for dataset type A of `this paper <https://arxiv.org/abs/2009.08340>`_::

            param_list = [
                [0.5, 1, 1],
                [-0.5, 1, 1]
            ]

        Default: :code:`None` will default to the example.
    :param epochs: Number of epochs for each iteration
    :param batch_size: Batch size at each iteration
    :param display_freq: Frequency in terms of epochs of when to do a checkpoint.
    :param optimizer: Optimizer to be used. Keras optimizers are not allowed.
            Can be either cvnn.optimizers.Optimizer or a string listed in opt_dispatcher.
    :param validation_split: float between 0 and 1. Fraction of the training data to be used as validation data. 
        The model will set apart this fraction of the training data, will not train on it, and will evaluate the loss and any model metrics on this data at the end of each epoch. 
        The validation data is selected from the last samples in the x and y data provided, before shuffling. 
        This argument is not supported when x is a dataset, generator or keras.utils.Sequence instance.
    :param shape_raw: List of sizes of each hidden layer.
        For example :code:`[64]` will generate a CVNN with one hidden layer of size 64.
        Default None will default to example.
    :param activation: Activation function to be used at each hidden layer
    :param debug:
    :param tensorboard: If True, it will generate tensorboard outputs to check training values.
    :param polar: Boolean weather the RVNN should receive real and imaginary part (:code:`False`) or amplitude and phase (:code:`True`)
    :param do_all: If true (default) it creates a :code:`plot/` folder with the plots generated by :code:`MonteCarloAnalyzer.do_all()`
    :param dropout: (float) Dropout to be used at each hidden layer. If None it will not use any dropout.
    :return: (string) Full path to the :code:`run_data.csv` generated file. 
        It can be used by :code:`cvnn.data_analysis.SeveralMonteCarloComparison` to compare several runs.


.. [CIT2020-BARRACHINA] Jose Agustin Barrachina, Chenfang Ren, Christele Morisseau, Gilles Vieillard, Jean-Philippe Ovarlez “Complex-Valued vs. Real-Valued Neural Networks for Classification Perspectives: An Example on Non-Circular Data” arXiv:2009.08340 ML Stat, Sep. 2020. Available: https://arxiv.org/abs/2009.08340.