<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite errors="0" failures="2" hostname="DESKTOP-RA5I5L7" name="pytest" skipped="0" tests="2" time="45.052" timestamp="2021-01-06T17:59:54.200865"><testcase classname="tests.test_capacity_real_equivalent" name="test_shape" time="1.440"><failure message="tensorflow.python.framework.errors_impl.NotFoundError: Could not find valid device for node.&#10;Node:{{node Sqrt}}&#10;All kernels registered for op Sqrt :&#10;  device='CPU'; T in [DT_FLOAT]&#10;  device='CPU'; T in [DT_HALF]&#10;  device='CPU'; T in [DT_DOUBLE]&#10;  device='CPU'; T in [DT_BFLOAT16]&#10;  device='CPU'; T in [DT_COMPLEX64]&#10;  device='CPU'; T in [DT_COMPLEX128]&#10;  device='GPU'; T in [DT_FLOAT]&#10;  device='GPU'; T in [DT_HALF]&#10;  device='GPU'; T in [DT_DOUBLE]&#10; [Op:Sqrt]">Traceback (most recent call last):
  File "W:\HardDiskDrive\Documentos\GitHub\cvnn\tests\test_capacity_real_equivalent.py", line 40, in test_shape
    shape_tst(4, 2, [1, 30, 500, 400, 60, 50, 3], classifier=True, equiv_technique='ratio')
  File "W:\HardDiskDrive\Documentos\GitHub\cvnn\tests\test_capacity_real_equivalent.py", line 23, in shape_tst
    complex_network = Sequential(shape, name="complex_network")
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\training\tracking\base.py", line 457, in _method_wrapper
    result = method(self, *args, **kwargs)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\keras\engine\sequential.py", line 116, in __init__
    self.add(layer)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\training\tracking\base.py", line 457, in _method_wrapper
    result = method(self, *args, **kwargs)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\keras\engine\sequential.py", line 203, in add
    output_tensor = layer(self.outputs[0])
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\keras\engine\base_layer.py", line 748, in __call__
    self._maybe_build(inputs)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\keras\engine\base_layer.py", line 2116, in _maybe_build
    self.build(input_shapes)
  File "W:\HardDiskDrive\Documentos\GitHub\cvnn\cvnn\layers.py", line 90, in build
    trainable=True, dtype=self.my_dtype
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\keras\engine\base_layer.py", line 446, in add_weight
    caching_device=caching_device)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\training\tracking\base.py", line 744, in _add_variable_with_custom_getter
    **kwargs_for_getter)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\keras\engine\base_layer_utils.py", line 142, in make_variable
    shape=variable_shape if variable_shape else None)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\variables.py", line 258, in __call__
    return cls._variable_v1_call(*args, **kwargs)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\variables.py", line 219, in _variable_v1_call
    shape=shape)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\variables.py", line 197, in &lt;lambda&gt;
    previous_getter = lambda **kwargs: default_variable_creator(None, **kwargs)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\variable_scope.py", line 2596, in default_variable_creator
    shape=shape)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\variables.py", line 262, in __call__
    return super(VariableMetaclass, cls).__call__(*args, **kwargs)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\resource_variable_ops.py", line 1411, in __init__
    distribute_strategy=distribute_strategy)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\resource_variable_ops.py", line 1542, in _init_from_args
    initial_value() if init_from_fn else initial_value,
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\keras\engine\base_layer_utils.py", line 122, in &lt;lambda&gt;
    init_val = lambda: initializer(shape, dtype=dtype)
  File "W:\HardDiskDrive\Documentos\GitHub\cvnn\cvnn\initializers.py", line 106, in __call__
    arg = arg/tf.math.sqrt(2)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\gen_math_ops.py", line 9831, in sqrt
    _ops.raise_from_not_ok_status(e, name)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\framework\ops.py", line 6606, in raise_from_not_ok_status
    six.raise_from(core._status_to_exception(e.code, message), None)
  File "&lt;string&gt;", line 3, in raise_from
tensorflow.python.framework.errors_impl.NotFoundError: Could not find valid device for node.
Node:{{node Sqrt}}
All kernels registered for op Sqrt :
  device='CPU'; T in [DT_FLOAT]
  device='CPU'; T in [DT_HALF]
  device='CPU'; T in [DT_DOUBLE]
  device='CPU'; T in [DT_BFLOAT16]
  device='CPU'; T in [DT_COMPLEX64]
  device='CPU'; T in [DT_COMPLEX128]
  device='GPU'; T in [DT_FLOAT]
  device='GPU'; T in [DT_HALF]
  device='GPU'; T in [DT_DOUBLE]
 [Op:Sqrt]</failure></testcase><testcase classname="tests.test_custom_layers" name="test_layers" time="0.950"><failure message="ValueError: Expected floating point type, got &lt;dtype: 'complex64'&gt;.">Traceback (most recent call last):
  File "W:\HardDiskDrive\Documentos\GitHub\cvnn\tests\test_custom_layers.py", line 212, in test_layers
    shape_ad_dtype_of_conv2d()
  File "W:\HardDiskDrive\Documentos\GitHub\cvnn\tests\test_custom_layers.py", line 72, in shape_ad_dtype_of_conv2d
    y = ComplexConv2D(2, 3, activation='cart_relu', padding="same", input_shape=input_shape[1:], dtype=x.dtype)(x)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\keras\engine\base_layer.py", line 818, in __call__
    self._maybe_build(inputs)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\keras\engine\base_layer.py", line 2116, in _maybe_build
    self.build(input_shapes)
  File "W:\HardDiskDrive\Documentos\GitHub\cvnn\cvnn\layers.py", line 269, in build
    dtype=self.my_dtype)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\keras\engine\base_layer.py", line 446, in add_weight
    caching_device=caching_device)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\training\tracking\base.py", line 744, in _add_variable_with_custom_getter
    **kwargs_for_getter)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\keras\engine\base_layer_utils.py", line 142, in make_variable
    shape=variable_shape if variable_shape else None)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\variables.py", line 258, in __call__
    return cls._variable_v1_call(*args, **kwargs)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\variables.py", line 219, in _variable_v1_call
    shape=shape)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\variables.py", line 197, in &lt;lambda&gt;
    previous_getter = lambda **kwargs: default_variable_creator(None, **kwargs)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\variable_scope.py", line 2596, in default_variable_creator
    shape=shape)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\variables.py", line 262, in __call__
    return super(VariableMetaclass, cls).__call__(*args, **kwargs)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\resource_variable_ops.py", line 1411, in __init__
    distribute_strategy=distribute_strategy)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\resource_variable_ops.py", line 1542, in _init_from_args
    initial_value() if init_from_fn else initial_value,
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\keras\engine\base_layer_utils.py", line 122, in &lt;lambda&gt;
    init_val = lambda: initializer(shape, dtype=dtype)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\init_ops_v2.py", line 404, in __call__
    dtype = _assert_float_dtype(dtype)
  File "C:\Users\NEGU93\.conda\envs\tf-2-gpu\lib\site-packages\tensorflow_core\python\ops\init_ops_v2.py", line 757, in _assert_float_dtype
    raise ValueError("Expected floating point type, got %s." % dtype)
ValueError: Expected floating point type, got &lt;dtype: 'complex64'&gt;.</failure></testcase><testcase time="0.000" /></testsuite></testsuites>