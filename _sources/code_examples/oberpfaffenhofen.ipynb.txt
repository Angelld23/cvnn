{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# PolSAR Oberpfaffenhofen example\n",
    "\n",
    "- Download the dataset from [esa official website](https://earth.esa.int/web/polsarpro/data-sources/sample-datasets).\n",
    "- Ground truth can be found at this [github repository](https://github.com/fudanxu/CV-CNN/blob/master/Label_Germany.mat)."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Dataset\n",
    "First we open the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "T shape (1300, 1200, 21); labels shape (1300, 1200)\n"
     ]
    }
   ],
   "source": [
    "from pathlib import Path\n",
    "import scipy.io\n",
    "import numpy as np\n",
    "import spectral.io.envi as envi\n",
    "from cvnn.utils import standarize, randomize\n",
    "\n",
    "raw_labels = scipy.io.loadmat('/media/barrachina/data/datasets/PolSar/Oberpfaffenhofen/Label_Germany.mat')['label']\n",
    "path = Path('/media/barrachina/data/datasets/PolSar/Oberpfaffenhofen/ESAR_Oberpfaffenhofen_T6/Master_Track_Slave_Track/T6')\n",
    "T = np.zeros(raw_labels.shape + (21,), dtype=complex)\n",
    "\n",
    "T[:, :, 0] = standarize(envi.open(path / 'T11.bin.hdr', path / 'T11.bin').read_band(0))\n",
    "T[:, :, 1] = standarize(envi.open(path / 'T22.bin.hdr', path / 'T22.bin').read_band(0))\n",
    "T[:, :, 2] = standarize(envi.open(path / 'T33.bin.hdr', path / 'T33.bin').read_band(0))\n",
    "T[:, :, 3] = standarize(envi.open(path / 'T44.bin.hdr', path / 'T44.bin').read_band(0))\n",
    "T[:, :, 4] = standarize(envi.open(path / 'T55.bin.hdr', path / 'T55.bin').read_band(0))\n",
    "T[:, :, 5] = standarize(envi.open(path / 'T66.bin.hdr', path / 'T66.bin').read_band(0))\n",
    "\n",
    "T[:, :, 6] = standarize(envi.open(path / 'T12_real.bin.hdr', path / 'T12_real.bin').read_band(0) + \\\n",
    "                        1j * envi.open(path / 'T12_imag.bin.hdr', path / 'T12_imag.bin').read_band(0))\n",
    "T[:, :, 7] = standarize(envi.open(path / 'T13_real.bin.hdr', path / 'T13_real.bin').read_band(0) + \\\n",
    "                        1j * envi.open(path / 'T13_imag.bin.hdr', path / 'T13_imag.bin').read_band(0))\n",
    "T[:, :, 8] = standarize(envi.open(path / 'T14_real.bin.hdr', path / 'T14_real.bin').read_band(0) + \\\n",
    "                        1j * envi.open(path / 'T14_imag.bin.hdr', path / 'T14_imag.bin').read_band(0))\n",
    "T[:, :, 9] = standarize(envi.open(path / 'T15_real.bin.hdr', path / 'T15_real.bin').read_band(0) + \\\n",
    "                        1j * envi.open(path / 'T15_imag.bin.hdr', path / 'T15_imag.bin').read_band(0))\n",
    "T[:, :, 10] = standarize(envi.open(path / 'T16_real.bin.hdr', path / 'T16_real.bin').read_band(0) + \\\n",
    "                         1j * envi.open(path / 'T16_imag.bin.hdr', path / 'T16_imag.bin').read_band(0))\n",
    "\n",
    "T[:, :, 11] = standarize(envi.open(path / 'T23_real.bin.hdr', path / 'T23_real.bin').read_band(0) + \\\n",
    "                         1j * envi.open(path / 'T23_imag.bin.hdr', path / 'T23_imag.bin').read_band(0))\n",
    "T[:, :, 12] = standarize(envi.open(path / 'T24_real.bin.hdr', path / 'T24_real.bin').read_band(0) + \\\n",
    "                         1j * envi.open(path / 'T24_imag.bin.hdr', path / 'T24_imag.bin').read_band(0))\n",
    "T[:, :, 13] = standarize(envi.open(path / 'T25_real.bin.hdr', path / 'T25_real.bin').read_band(0) + \\\n",
    "                         1j * envi.open(path / 'T25_imag.bin.hdr', path / 'T25_imag.bin').read_band(0))\n",
    "T[:, :, 14] = standarize(envi.open(path / 'T26_real.bin.hdr', path / 'T26_real.bin').read_band(0) + \\\n",
    "                         1j * envi.open(path / 'T26_imag.bin.hdr', path / 'T26_imag.bin').read_band(0))\n",
    "\n",
    "T[:, :, 15] = standarize(envi.open(path / 'T34_real.bin.hdr', path / 'T34_real.bin').read_band(0) + \\\n",
    "                         1j * envi.open(path / 'T34_imag.bin.hdr', path / 'T34_imag.bin').read_band(0))\n",
    "T[:, :, 16] = standarize(envi.open(path / 'T35_real.bin.hdr', path / 'T35_real.bin').read_band(0) + \\\n",
    "                         1j * envi.open(path / 'T35_imag.bin.hdr', path / 'T35_imag.bin').read_band(0))\n",
    "T[:, :, 17] = standarize(envi.open(path / 'T36_real.bin.hdr', path / 'T36_real.bin').read_band(0) + \\\n",
    "                         1j * envi.open(path / 'T36_imag.bin.hdr', path / 'T36_imag.bin').read_band(0))\n",
    "\n",
    "T[:, :, 18] = standarize(envi.open(path / 'T45_real.bin.hdr', path / 'T45_real.bin').read_band(0) + \\\n",
    "                         1j * envi.open(path / 'T45_imag.bin.hdr', path / 'T45_imag.bin').read_band(0))\n",
    "T[:, :, 19] = standarize(envi.open(path / 'T46_real.bin.hdr', path / 'T46_real.bin').read_band(0) + \\\n",
    "                         1j * envi.open(path / 'T46_imag.bin.hdr', path / 'T46_imag.bin').read_band(0))\n",
    "\n",
    "T[:, :, 20] = standarize(envi.open(path / 'T56_real.bin.hdr', path / 'T56_real.bin').read_band(0) + \\\n",
    "                         1j * envi.open(path / 'T56_imag.bin.hdr', path / 'T56_imag.bin').read_band(0))\n",
    "\n",
    "print(\"T shape \" + str(T.shape) + \"; labels shape \" + str(raw_labels.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "See the ground truth was correctly opened:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import tikzplotlib\n",
    "\n",
    "def show_ground_truth(labels, savefile=None):\n",
    "    colors = np.array([\n",
    "        [1, 0.349, 0.392],\n",
    "        [0.086, 0.858, 0.576],\n",
    "        [0.937, 0.917, 0.352]\n",
    "    ])\n",
    "    ground_truth = np.zeros(labels.shape + (3,), dtype=float)\n",
    "    for i in range(labels.shape[0]):\n",
    "        for j in range(labels.shape[1]):\n",
    "            if labels[i, j] != 0:\n",
    "                ground_truth[i, j] = colors[labels[i, j] - 1]\n",
    "    plt.imshow(ground_truth)\n",
    "    plt.show()\n",
    "    if savefile is not None:\n",
    "        savefile = Path(savefile)\n",
    "        plt.imsave(savefile / \"ground_truth.pdf\", ground_truth)\n",
    "        tikzplotlib.save(savefile / \"ground_truth.tex\")\n",
    "    \n",
    "    \n",
    "show_ground_truth(raw_labels)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Preprocess dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "def remove_unlabeled(x, y):\n",
    "    mask = y != 0\n",
    "    return x[mask], y[mask]\n",
    "\n",
    "T, labels = remove_unlabeled(T, raw_labels)    # Remove unlabaled pixels\n",
    "labels -= 1                                    # map [1, 3] to [0, 2]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1311618,)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "labels.shape"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Separate Test, Train and validation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Sizes:\n",
      "\t- Train shape: (104928, 21)\n",
      "\t- Test shape: (1180458, 21)\n",
      "\t- Validation shape: (26232, 21)\n"
     ]
    }
   ],
   "source": [
    "from cvnn.dataset import Dataset\n",
    "\n",
    "def separate_train_test(x, y, ratio=0.1):\n",
    "    classes = set(y)\n",
    "    x_ordered_database = []\n",
    "    y_ordered_database = []\n",
    "    for cls in classes:\n",
    "        mask = y == cls\n",
    "        x_ordered_database.append(x[mask])\n",
    "        y_ordered_database.append(y[mask])\n",
    "    len_train = int(y.shape[0]*ratio/len(classes))\n",
    "    x_train = x_ordered_database[0][:len_train]\n",
    "    x_test = x_ordered_database[0][len_train:]\n",
    "    y_train = y_ordered_database[0][:len_train]\n",
    "    y_test = y_ordered_database[0][len_train:]\n",
    "    for i in range(len(y_ordered_database)):\n",
    "        assert (y_ordered_database[i] == i).all()\n",
    "        assert len(y_ordered_database[i]) == len(x_ordered_database[i])\n",
    "        if i != 0:\n",
    "            x_train = np.concatenate((x_train, x_ordered_database[i][:len_train]))\n",
    "            x_test = np.concatenate((x_test, x_ordered_database[i][len_train:]))\n",
    "            y_train = np.concatenate((y_train, y_ordered_database[i][:len_train]))\n",
    "            y_test = np.concatenate((y_test, y_ordered_database[i][len_train:]))\n",
    "    x_train, y_train = randomize(x_train, y_train)\n",
    "    x_test, y_test = randomize(x_test, y_test)\n",
    "    return x_train, y_train, x_test, y_test\n",
    "\n",
    "T_rand, labels_rand = randomize(T, labels)\n",
    "x_train, y_train, x_test, y_test = separate_train_test(T_rand, labels_rand, ratio=0.1)\n",
    "x_train, y_train, x_val, y_val = separate_train_test(x_train, y_train, ratio=0.8)\n",
    "y_train = Dataset.sparse_into_categorical(y_train)\n",
    "y_test = Dataset.sparse_into_categorical(y_test)\n",
    "y_val = Dataset.sparse_into_categorical(y_val)\n",
    "dataset = Dataset(x_train.astype(np.complex64), y_train, dataset_name='Oberpfaffenhofen')\n",
    "\n",
    "print(\"Sizes:\\n\\t- Train shape: \" + str(x_train.shape) + \"\\n\\t- Test shape: \" + str(x_test.shape) + \"\\n\\t- Validation shape: \" + str(x_val.shape))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For training we use the same number of class examples for train and validation set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train set\n",
      "\t34976 examples of class 0\n",
      "\t34976 examples of class 1\n",
      "\t34976 examples of class 2\n",
      "Test set\n",
      "\t284331 examples of class 0\n",
      "\t202953 examples of class 1\n",
      "\t693174 examples of class 2\n",
      "Validation set\n",
      "\t8744 examples of class 0\n",
      "\t8744 examples of class 1\n",
      "\t8744 examples of class 2\n"
     ]
    }
   ],
   "source": [
    "def get_number_of_each_class(x, name):\n",
    "    x = np.array(x)\n",
    "    x = Dataset.categorical_to_sparse(x)\n",
    "    print(name + \" set\")\n",
    "    for cls in range(min(x), max(x)+1):\n",
    "        print(\"\\t\" + str(np.sum(x == cls)) + \" examples of class \" + str(cls))\n",
    "        \n",
    "        \n",
    "get_number_of_each_class(y_train, \"Train\")\n",
    "get_number_of_each_class(y_test, \"Test\")\n",
    "get_number_of_each_class(y_val, \"Validation\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Training"
   ]
  },
  {
   "source": [
    "Select Hyper-parameters"
   ],
   "cell_type": "code",
   "metadata": {},
   "execution_count": null,
   "outputs": []
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [],
   "source": [
    "from cvnn.layers import Dense\n",
    "from cvnn import layers\n",
    "\n",
    "\n",
    "shape_raw = [50, 50]\n",
    "input_size = dataset.x.shape[1]  # Size of input\n",
    "output_size = dataset.y.shape[1]  # Size of output\n",
    "layers.ComplexLayer.last_layer_output_dtype = None\n",
    "layers.ComplexLayer.last_layer_output_size = None\n",
    "if len(shape_raw) == 0:\n",
    "    print(\"No hidden layers are used. activation and dropout will be ignored\")\n",
    "    shape = [\n",
    "        Dense(input_size=input_size, output_size=output_size, activation='softmax_real',\n",
    "              input_dtype=np.complex64, dropout=None)\n",
    "    ]\n",
    "else:  # len(shape_raw) > 0:\n",
    "    shape = [Dense(input_size=input_size, output_size=shape_raw[0], activation='cart_relu',\n",
    "                   input_dtype=np.complex64, dropout=0.5)]\n",
    "    for i in range(1, len(shape_raw)):\n",
    "        shape.append(Dense(output_size=shape_raw[i], activation='cart_relu', dropout=0.5))\n",
    "    shape.append(Dense(output_size=output_size, activation='softmax_real', dropout=None))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 1/200\n",
      "   1050/Unknown - 1s 968us/step - loss: 0.2360 - accuracy: 0.9300 - val_loss: 0.3063 - val_accuracy: 0.8875\n",
      "Epoch 2/200\n",
      "1050/1050 [==============================] - 1s 613us/step - loss: 0.2090 - accuracy: 0.9200 - val_loss: 0.2943 - val_accuracy: 0.8868\n",
      "Epoch 3/200\n",
      "1050/1050 [==============================] - 1s 639us/step - loss: 0.3087 - accuracy: 0.8800 - val_loss: 0.2925 - val_accuracy: 0.8879\n",
      "Epoch 4/200\n",
      "1050/1050 [==============================] - 1s 597us/step - loss: 0.2778 - accuracy: 0.8700 - val_loss: 0.2893 - val_accuracy: 0.8915\n",
      "Epoch 5/200\n",
      "1050/1050 [==============================] - 1s 631us/step - loss: 0.3104 - accuracy: 0.8700 - val_loss: 0.3285 - val_accuracy: 0.8782\n",
      "Epoch 6/200\n",
      "1050/1050 [==============================] - 1s 628us/step - loss: 0.2151 - accuracy: 0.9100 - val_loss: 0.2829 - val_accuracy: 0.8939\n",
      "Epoch 7/200\n",
      "1050/1050 [==============================] - 1s 609us/step - loss: 0.2457 - accuracy: 0.9100 - val_loss: 0.2879 - val_accuracy: 0.8918\n",
      "Epoch 8/200\n",
      "1050/1050 [==============================] - 1s 611us/step - loss: 0.2393 - accuracy: 0.9000 - val_loss: 0.2885 - val_accuracy: 0.8900\n",
      "Epoch 9/200\n",
      "1050/1050 [==============================] - 1s 601us/step - loss: 0.2586 - accuracy: 0.9000 - val_loss: 0.2832 - val_accuracy: 0.8938\n",
      "Epoch 10/200\n",
      "1050/1050 [==============================] - 1s 600us/step - loss: 0.3311 - accuracy: 0.8500 - val_loss: 0.2898 - val_accuracy: 0.8928\n",
      "Epoch 11/200\n",
      "1050/1050 [==============================] - 1s 643us/step - loss: 0.1708 - accuracy: 0.9200 - val_loss: 0.2857 - val_accuracy: 0.8928\n",
      "Epoch 12/200\n",
      "1050/1050 [==============================] - 1s 626us/step - loss: 0.1962 - accuracy: 0.9200 - val_loss: 0.2849 - val_accuracy: 0.8935\n",
      "Epoch 13/200\n",
      "1050/1050 [==============================] - 1s 588us/step - loss: 0.2393 - accuracy: 0.8900 - val_loss: 0.2955 - val_accuracy: 0.8874\n",
      "Epoch 14/200\n",
      "1050/1050 [==============================] - 1s 619us/step - loss: 0.3850 - accuracy: 0.8500 - val_loss: 0.2904 - val_accuracy: 0.8892\n",
      "Epoch 15/200\n",
      "1050/1050 [==============================] - 1s 615us/step - loss: 0.2327 - accuracy: 0.9000 - val_loss: 0.2902 - val_accuracy: 0.8922\n",
      "Epoch 16/200\n",
      "1050/1050 [==============================] - 1s 661us/step - loss: 0.3237 - accuracy: 0.8900 - val_loss: 0.3008 - val_accuracy: 0.8881\n",
      "Epoch 17/200\n",
      "1050/1050 [==============================] - 1s 618us/step - loss: 0.2163 - accuracy: 0.9200 - val_loss: 0.2847 - val_accuracy: 0.8937\n",
      "Epoch 18/200\n",
      "1050/1050 [==============================] - 1s 647us/step - loss: 0.2519 - accuracy: 0.8800 - val_loss: 0.2795 - val_accuracy: 0.8952\n",
      "Epoch 19/200\n",
      "1050/1050 [==============================] - 1s 664us/step - loss: 0.3139 - accuracy: 0.8800 - val_loss: 0.2862 - val_accuracy: 0.8918\n",
      "Epoch 20/200\n",
      "1050/1050 [==============================] - 1s 634us/step - loss: 0.3106 - accuracy: 0.9000 - val_loss: 0.2825 - val_accuracy: 0.8947\n",
      "Epoch 21/200\n",
      "1050/1050 [==============================] - 1s 649us/step - loss: 0.3095 - accuracy: 0.8200 - val_loss: 0.2855 - val_accuracy: 0.8943\n",
      "Epoch 22/200\n",
      "1050/1050 [==============================] - 1s 634us/step - loss: 0.2187 - accuracy: 0.9100 - val_loss: 0.2807 - val_accuracy: 0.8968\n",
      "Epoch 23/200\n",
      "1050/1050 [==============================] - 1s 641us/step - loss: 0.3254 - accuracy: 0.8600 - val_loss: 0.2878 - val_accuracy: 0.8927\n",
      "Epoch 24/200\n",
      "1050/1050 [==============================] - 1s 642us/step - loss: 0.2714 - accuracy: 0.8700 - val_loss: 0.2808 - val_accuracy: 0.8945\n",
      "Epoch 25/200\n",
      "1050/1050 [==============================] - 1s 610us/step - loss: 0.4991 - accuracy: 0.8500 - val_loss: 0.2889 - val_accuracy: 0.8911\n",
      "Epoch 26/200\n",
      "1050/1050 [==============================] - 1s 624us/step - loss: 0.2370 - accuracy: 0.9000 - val_loss: 0.2892 - val_accuracy: 0.8915\n",
      "Epoch 27/200\n",
      "1050/1050 [==============================] - 1s 638us/step - loss: 0.3302 - accuracy: 0.8800 - val_loss: 0.2835 - val_accuracy: 0.8944\n",
      "Epoch 28/200\n",
      "1050/1050 [==============================] - 1s 644us/step - loss: 0.2492 - accuracy: 0.9100 - val_loss: 0.2792 - val_accuracy: 0.8975\n",
      "Epoch 29/200\n",
      "1050/1050 [==============================] - 1s 647us/step - loss: 0.2734 - accuracy: 0.9300 - val_loss: 0.2819 - val_accuracy: 0.8973\n",
      "Epoch 30/200\n",
      "1050/1050 [==============================] - 1s 637us/step - loss: 0.3736 - accuracy: 0.8800 - val_loss: 0.2879 - val_accuracy: 0.8913\n",
      "Epoch 31/200\n",
      "1050/1050 [==============================] - 1s 643us/step - loss: 0.2635 - accuracy: 0.8800 - val_loss: 0.2884 - val_accuracy: 0.8936\n",
      "Epoch 32/200\n",
      "1050/1050 [==============================] - 1s 631us/step - loss: 0.2337 - accuracy: 0.9100 - val_loss: 0.2907 - val_accuracy: 0.8903\n",
      "Epoch 33/200\n",
      "1050/1050 [==============================] - 1s 669us/step - loss: 0.2525 - accuracy: 0.8600 - val_loss: 0.2860 - val_accuracy: 0.8921\n",
      "Epoch 34/200\n",
      "1050/1050 [==============================] - 1s 658us/step - loss: 0.2771 - accuracy: 0.8900 - val_loss: 0.2857 - val_accuracy: 0.8970\n",
      "Epoch 35/200\n",
      "1050/1050 [==============================] - 1s 645us/step - loss: 0.3795 - accuracy: 0.8800 - val_loss: 0.2815 - val_accuracy: 0.8924\n",
      "Epoch 36/200\n",
      "1050/1050 [==============================] - 1s 615us/step - loss: 0.2411 - accuracy: 0.9100 - val_loss: 0.2940 - val_accuracy: 0.8878\n",
      "Epoch 37/200\n",
      "1050/1050 [==============================] - 1s 641us/step - loss: 0.3555 - accuracy: 0.8900 - val_loss: 0.2895 - val_accuracy: 0.8920\n",
      "Epoch 38/200\n",
      "1050/1050 [==============================] - 1s 627us/step - loss: 0.2261 - accuracy: 0.9300 - val_loss: 0.3025 - val_accuracy: 0.8911\n",
      "Epoch 39/200\n",
      "1050/1050 [==============================] - 1s 670us/step - loss: 0.2432 - accuracy: 0.8800 - val_loss: 0.2823 - val_accuracy: 0.8932\n",
      "Epoch 40/200\n",
      "1050/1050 [==============================] - 1s 616us/step - loss: 0.2621 - accuracy: 0.9200 - val_loss: 0.2850 - val_accuracy: 0.8917\n",
      "Epoch 41/200\n",
      "1050/1050 [==============================] - 1s 626us/step - loss: 0.3030 - accuracy: 0.9100 - val_loss: 0.3016 - val_accuracy: 0.8862\n",
      "Epoch 42/200\n",
      "1050/1050 [==============================] - 1s 660us/step - loss: 0.3223 - accuracy: 0.8600 - val_loss: 0.3014 - val_accuracy: 0.8880\n",
      "Epoch 43/200\n",
      "1050/1050 [==============================] - 1s 634us/step - loss: 0.3168 - accuracy: 0.9400 - val_loss: 0.2828 - val_accuracy: 0.8948\n",
      "Epoch 44/200\n",
      "1050/1050 [==============================] - 1s 647us/step - loss: 0.2825 - accuracy: 0.8900 - val_loss: 0.2792 - val_accuracy: 0.8960\n",
      "Epoch 45/200\n",
      "1050/1050 [==============================] - 1s 654us/step - loss: 0.2115 - accuracy: 0.9400 - val_loss: 0.2795 - val_accuracy: 0.8949\n",
      "Epoch 46/200\n",
      "1050/1050 [==============================] - 1s 635us/step - loss: 0.3370 - accuracy: 0.8700 - val_loss: 0.3030 - val_accuracy: 0.8868\n",
      "Epoch 47/200\n",
      "1050/1050 [==============================] - 1s 648us/step - loss: 0.2037 - accuracy: 0.9000 - val_loss: 0.2837 - val_accuracy: 0.8908\n",
      "Epoch 48/200\n",
      "1050/1050 [==============================] - 1s 658us/step - loss: 0.2455 - accuracy: 0.9500 - val_loss: 0.2795 - val_accuracy: 0.8973\n",
      "Epoch 49/200\n",
      "1050/1050 [==============================] - 1s 650us/step - loss: 0.3444 - accuracy: 0.9000 - val_loss: 0.2822 - val_accuracy: 0.8966\n",
      "Epoch 50/200\n",
      "1050/1050 [==============================] - 1s 653us/step - loss: 0.4131 - accuracy: 0.8800 - val_loss: 0.2965 - val_accuracy: 0.8893\n",
      "Epoch 51/200\n",
      "1050/1050 [==============================] - 1s 621us/step - loss: 0.2427 - accuracy: 0.8900 - val_loss: 0.2819 - val_accuracy: 0.8960\n",
      "Epoch 52/200\n",
      "1050/1050 [==============================] - 1s 638us/step - loss: 0.3302 - accuracy: 0.8800 - val_loss: 0.3334 - val_accuracy: 0.8803\n",
      "Epoch 53/200\n",
      "1050/1050 [==============================] - 1s 632us/step - loss: 0.2404 - accuracy: 0.8900 - val_loss: 0.2782 - val_accuracy: 0.8976\n",
      "Epoch 54/200\n",
      "1050/1050 [==============================] - 1s 631us/step - loss: 0.3016 - accuracy: 0.8800 - val_loss: 0.2847 - val_accuracy: 0.8951\n",
      "Epoch 55/200\n",
      "1050/1050 [==============================] - 1s 639us/step - loss: 0.2486 - accuracy: 0.9100 - val_loss: 0.2752 - val_accuracy: 0.8965\n",
      "Epoch 56/200\n",
      "1050/1050 [==============================] - 1s 623us/step - loss: 0.3040 - accuracy: 0.9300 - val_loss: 0.2834 - val_accuracy: 0.8928\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Epoch 57/200\n",
      "1050/1050 [==============================] - 1s 652us/step - loss: 0.3488 - accuracy: 0.9000 - val_loss: 0.2937 - val_accuracy: 0.8907\n",
      "Epoch 58/200\n",
      "1050/1050 [==============================] - 1s 655us/step - loss: 0.2862 - accuracy: 0.9000 - val_loss: 0.2772 - val_accuracy: 0.8943\n",
      "Epoch 59/200\n",
      "1050/1050 [==============================] - 1s 672us/step - loss: 0.2610 - accuracy: 0.9100 - val_loss: 0.2902 - val_accuracy: 0.8908\n",
      "Epoch 60/200\n",
      "1050/1050 [==============================] - 1s 654us/step - loss: 0.1780 - accuracy: 0.9400 - val_loss: 0.2754 - val_accuracy: 0.8962\n",
      "Epoch 61/200\n",
      "1050/1050 [==============================] - 1s 627us/step - loss: 0.2228 - accuracy: 0.9000 - val_loss: 0.2775 - val_accuracy: 0.8965\n",
      "Epoch 62/200\n",
      "1050/1050 [==============================] - 1s 656us/step - loss: 0.2226 - accuracy: 0.9100 - val_loss: 0.2744 - val_accuracy: 0.8973\n",
      "Epoch 63/200\n",
      "1050/1050 [==============================] - 1s 658us/step - loss: 0.3424 - accuracy: 0.8600 - val_loss: 0.2798 - val_accuracy: 0.8931\n",
      "Epoch 64/200\n",
      "1050/1050 [==============================] - 1s 674us/step - loss: 0.2664 - accuracy: 0.8400 - val_loss: 0.2824 - val_accuracy: 0.8963\n",
      "Epoch 65/200\n",
      "1050/1050 [==============================] - 1s 666us/step - loss: 0.3156 - accuracy: 0.9000 - val_loss: 0.2818 - val_accuracy: 0.8961\n",
      "Epoch 66/200\n",
      "1050/1050 [==============================] - 1s 670us/step - loss: 0.2508 - accuracy: 0.8900 - val_loss: 0.2747 - val_accuracy: 0.8972\n",
      "Epoch 67/200\n",
      "1050/1050 [==============================] - 1s 632us/step - loss: 0.2245 - accuracy: 0.8900 - val_loss: 0.2753 - val_accuracy: 0.8971\n",
      "Epoch 68/200\n",
      "1050/1050 [==============================] - 1s 698us/step - loss: 0.2394 - accuracy: 0.9000 - val_loss: 0.2803 - val_accuracy: 0.8937\n",
      "Epoch 69/200\n",
      "1050/1050 [==============================] - 1s 664us/step - loss: 0.2516 - accuracy: 0.8900 - val_loss: 0.2907 - val_accuracy: 0.8919\n",
      "Epoch 70/200\n",
      "1050/1050 [==============================] - 1s 653us/step - loss: 0.1974 - accuracy: 0.9000 - val_loss: 0.3031 - val_accuracy: 0.8890\n",
      "Epoch 71/200\n",
      "1050/1050 [==============================] - 1s 648us/step - loss: 0.2624 - accuracy: 0.8800 - val_loss: 0.2842 - val_accuracy: 0.8939\n",
      "Epoch 72/200\n",
      "1050/1050 [==============================] - 1s 672us/step - loss: 0.3327 - accuracy: 0.8800 - val_loss: 0.2972 - val_accuracy: 0.8897\n",
      "Epoch 73/200\n",
      "1050/1050 [==============================] - 1s 669us/step - loss: 0.2719 - accuracy: 0.9100 - val_loss: 0.2767 - val_accuracy: 0.8966\n",
      "Epoch 74/200\n",
      "1050/1050 [==============================] - 1s 646us/step - loss: 0.2366 - accuracy: 0.9000 - val_loss: 0.2893 - val_accuracy: 0.8913\n",
      "Epoch 75/200\n",
      "1050/1050 [==============================] - 1s 670us/step - loss: 0.2316 - accuracy: 0.9100 - val_loss: 0.2775 - val_accuracy: 0.8965\n",
      "Epoch 76/200\n",
      "1050/1050 [==============================] - 1s 661us/step - loss: 0.2153 - accuracy: 0.9300 - val_loss: 0.2756 - val_accuracy: 0.8964\n",
      "Epoch 77/200\n",
      "1050/1050 [==============================] - 1s 671us/step - loss: 0.2560 - accuracy: 0.9100 - val_loss: 0.2778 - val_accuracy: 0.8966\n",
      "Epoch 78/200\n",
      "1050/1050 [==============================] - 1s 658us/step - loss: 0.2786 - accuracy: 0.9000 - val_loss: 0.2760 - val_accuracy: 0.8959\n",
      "Epoch 79/200\n",
      "1050/1050 [==============================] - 1s 658us/step - loss: 0.2817 - accuracy: 0.8900 - val_loss: 0.2769 - val_accuracy: 0.8949\n",
      "Epoch 80/200\n",
      "1050/1050 [==============================] - 1s 690us/step - loss: 0.4275 - accuracy: 0.8300 - val_loss: 0.2882 - val_accuracy: 0.8896\n",
      "Epoch 81/200\n",
      "1050/1050 [==============================] - 1s 691us/step - loss: 0.2346 - accuracy: 0.9300 - val_loss: 0.2755 - val_accuracy: 0.8958\n",
      "Epoch 82/200\n",
      "1050/1050 [==============================] - 1s 643us/step - loss: 0.2670 - accuracy: 0.9000 - val_loss: 0.2750 - val_accuracy: 0.8987\n",
      "Epoch 83/200\n",
      "1050/1050 [==============================] - 1s 618us/step - loss: 0.2857 - accuracy: 0.8600 - val_loss: 0.2808 - val_accuracy: 0.8967\n",
      "Epoch 84/200\n",
      "1050/1050 [==============================] - 1s 661us/step - loss: 0.3771 - accuracy: 0.8300 - val_loss: 0.2878 - val_accuracy: 0.8960\n",
      "Epoch 85/200\n",
      "1050/1050 [==============================] - 1s 656us/step - loss: 0.2855 - accuracy: 0.9200 - val_loss: 0.2752 - val_accuracy: 0.8985\n",
      "Epoch 86/200\n",
      "1050/1050 [==============================] - 1s 669us/step - loss: 0.2660 - accuracy: 0.9100 - val_loss: 0.2817 - val_accuracy: 0.8992\n",
      "Epoch 87/200\n",
      "1050/1050 [==============================] - 1s 651us/step - loss: 0.3082 - accuracy: 0.8900 - val_loss: 0.2717 - val_accuracy: 0.9000\n",
      "Epoch 88/200\n",
      "1050/1050 [==============================] - 1s 679us/step - loss: 0.3203 - accuracy: 0.9000 - val_loss: 0.2833 - val_accuracy: 0.8987\n",
      "Epoch 89/200\n",
      "1050/1050 [==============================] - 1s 647us/step - loss: 0.1987 - accuracy: 0.9100 - val_loss: 0.3054 - val_accuracy: 0.8843\n",
      "Epoch 90/200\n",
      "1050/1050 [==============================] - 1s 695us/step - loss: 0.3308 - accuracy: 0.9100 - val_loss: 0.2775 - val_accuracy: 0.8992\n",
      "Epoch 91/200\n",
      "1050/1050 [==============================] - 1s 696us/step - loss: 0.2116 - accuracy: 0.9200 - val_loss: 0.2798 - val_accuracy: 0.8968\n",
      "Epoch 92/200\n",
      "1050/1050 [==============================] - 1s 625us/step - loss: 0.3941 - accuracy: 0.8600 - val_loss: 0.3079 - val_accuracy: 0.8887\n",
      "Epoch 93/200\n",
      "1050/1050 [==============================] - 1s 684us/step - loss: 0.3159 - accuracy: 0.8900 - val_loss: 0.2943 - val_accuracy: 0.8946\n",
      "Epoch 94/200\n",
      "1050/1050 [==============================] - 1s 687us/step - loss: 0.2586 - accuracy: 0.9200 - val_loss: 0.2778 - val_accuracy: 0.8975\n",
      "Epoch 95/200\n",
      "1050/1050 [==============================] - 1s 696us/step - loss: 0.2343 - accuracy: 0.9400 - val_loss: 0.2864 - val_accuracy: 0.8915\n",
      "Epoch 96/200\n",
      "1050/1050 [==============================] - 1s 657us/step - loss: 0.2223 - accuracy: 0.9300 - val_loss: 0.2762 - val_accuracy: 0.8990\n",
      "Epoch 97/200\n",
      "1050/1050 [==============================] - 1s 701us/step - loss: 0.1758 - accuracy: 0.9000 - val_loss: 0.2734 - val_accuracy: 0.8984\n",
      "Epoch 98/200\n",
      "1050/1050 [==============================] - 1s 684us/step - loss: 0.2633 - accuracy: 0.9200 - val_loss: 0.2691 - val_accuracy: 0.9012\n",
      "Epoch 99/200\n",
      "1050/1050 [==============================] - 1s 681us/step - loss: 0.3042 - accuracy: 0.9000 - val_loss: 0.2731 - val_accuracy: 0.8988\n",
      "Epoch 100/200\n",
      "1050/1050 [==============================] - 1s 656us/step - loss: 0.2182 - accuracy: 0.9400 - val_loss: 0.2746 - val_accuracy: 0.8979\n",
      "Epoch 101/200\n",
      "1050/1050 [==============================] - 1s 676us/step - loss: 0.2427 - accuracy: 0.9200 - val_loss: 0.2732 - val_accuracy: 0.9004\n",
      "Epoch 102/200\n",
      "1050/1050 [==============================] - 1s 664us/step - loss: 0.2594 - accuracy: 0.9000 - val_loss: 0.2749 - val_accuracy: 0.9021\n",
      "Epoch 103/200\n",
      "1050/1050 [==============================] - 1s 681us/step - loss: 0.2713 - accuracy: 0.8800 - val_loss: 0.2968 - val_accuracy: 0.8914\n",
      "Epoch 104/200\n",
      "1050/1050 [==============================] - 1s 639us/step - loss: 0.2320 - accuracy: 0.9000 - val_loss: 0.2842 - val_accuracy: 0.8976\n",
      "Epoch 105/200\n",
      "1050/1050 [==============================] - 1s 658us/step - loss: 0.2528 - accuracy: 0.9400 - val_loss: 0.2780 - val_accuracy: 0.8957\n",
      "Epoch 106/200\n",
      "1050/1050 [==============================] - 1s 646us/step - loss: 0.2209 - accuracy: 0.9200 - val_loss: 0.2729 - val_accuracy: 0.8984\n",
      "Epoch 107/200\n",
      "1050/1050 [==============================] - 1s 786us/step - loss: 0.2035 - accuracy: 0.8800 - val_loss: 0.2732 - val_accuracy: 0.8989\n",
      "Epoch 108/200\n",
      "1050/1050 [==============================] - 1s 678us/step - loss: 0.2019 - accuracy: 0.9100 - val_loss: 0.2944 - val_accuracy: 0.8888\n",
      "Epoch 109/200\n",
      "1050/1050 [==============================] - 1s 682us/step - loss: 0.3853 - accuracy: 0.8700 - val_loss: 0.2740 - val_accuracy: 0.8990\n",
      "Epoch 110/200\n",
      "1050/1050 [==============================] - 1s 671us/step - loss: 0.2591 - accuracy: 0.9100 - val_loss: 0.2753 - val_accuracy: 0.8955\n",
      "Epoch 111/200\n",
      "1050/1050 [==============================] - 1s 689us/step - loss: 0.2053 - accuracy: 0.9400 - val_loss: 0.2770 - val_accuracy: 0.8965\n",
      "Epoch 112/200\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1050/1050 [==============================] - 1s 680us/step - loss: 0.3548 - accuracy: 0.8700 - val_loss: 0.2748 - val_accuracy: 0.8954\n",
      "Epoch 113/200\n",
      "1050/1050 [==============================] - 1s 666us/step - loss: 0.3066 - accuracy: 0.9000 - val_loss: 0.2744 - val_accuracy: 0.8999\n",
      "Epoch 114/200\n",
      "1050/1050 [==============================] - 1s 692us/step - loss: 0.3648 - accuracy: 0.8600 - val_loss: 0.2717 - val_accuracy: 0.8953\n",
      "Epoch 115/200\n",
      "1050/1050 [==============================] - 1s 690us/step - loss: 0.3330 - accuracy: 0.8900 - val_loss: 0.2799 - val_accuracy: 0.8987\n",
      "Epoch 116/200\n",
      "1050/1050 [==============================] - 1s 676us/step - loss: 0.3077 - accuracy: 0.9100 - val_loss: 0.2927 - val_accuracy: 0.8901\n",
      "Epoch 117/200\n",
      "1050/1050 [==============================] - 1s 693us/step - loss: 0.2511 - accuracy: 0.9100 - val_loss: 0.2763 - val_accuracy: 0.8985\n",
      "Epoch 118/200\n",
      "1050/1050 [==============================] - 1s 676us/step - loss: 0.1912 - accuracy: 0.9100 - val_loss: 0.2715 - val_accuracy: 0.8987\n",
      "Epoch 119/200\n",
      "1050/1050 [==============================] - 1s 648us/step - loss: 0.3761 - accuracy: 0.8500 - val_loss: 0.2775 - val_accuracy: 0.8962\n",
      "Epoch 120/200\n",
      "1050/1050 [==============================] - 1s 675us/step - loss: 0.2698 - accuracy: 0.8700 - val_loss: 0.2701 - val_accuracy: 0.8991\n",
      "Epoch 121/200\n",
      "1050/1050 [==============================] - 1s 699us/step - loss: 0.2300 - accuracy: 0.9500 - val_loss: 0.2685 - val_accuracy: 0.9000\n",
      "Epoch 122/200\n",
      "1050/1050 [==============================] - 1s 701us/step - loss: 0.1587 - accuracy: 0.9500 - val_loss: 0.2806 - val_accuracy: 0.8924\n",
      "Epoch 123/200\n",
      "1050/1050 [==============================] - 1s 707us/step - loss: 0.2140 - accuracy: 0.9300 - val_loss: 0.2720 - val_accuracy: 0.8986\n",
      "Epoch 124/200\n",
      "1050/1050 [==============================] - 1s 655us/step - loss: 0.3227 - accuracy: 0.8600 - val_loss: 0.2714 - val_accuracy: 0.8974\n",
      "Epoch 125/200\n",
      "1050/1050 [==============================] - 1s 708us/step - loss: 0.3752 - accuracy: 0.7800 - val_loss: 0.2851 - val_accuracy: 0.8964\n",
      "Epoch 126/200\n",
      "1050/1050 [==============================] - 1s 713us/step - loss: 0.2441 - accuracy: 0.8700 - val_loss: 0.2780 - val_accuracy: 0.8999\n",
      "Epoch 127/200\n",
      "1050/1050 [==============================] - 1s 689us/step - loss: 0.2931 - accuracy: 0.8700 - val_loss: 0.2685 - val_accuracy: 0.9000\n",
      "Epoch 128/200\n",
      "1050/1050 [==============================] - 1s 710us/step - loss: 0.1938 - accuracy: 0.9200 - val_loss: 0.2843 - val_accuracy: 0.8912\n",
      "Epoch 129/200\n",
      "1050/1050 [==============================] - 1s 675us/step - loss: 0.1635 - accuracy: 0.9400 - val_loss: 0.2905 - val_accuracy: 0.8924\n",
      "Epoch 130/200\n",
      "1050/1050 [==============================] - 1s 658us/step - loss: 0.2178 - accuracy: 0.9100 - val_loss: 0.2742 - val_accuracy: 0.8992\n",
      "Epoch 131/200\n",
      "1050/1050 [==============================] - 1s 714us/step - loss: 0.3790 - accuracy: 0.9000 - val_loss: 0.2753 - val_accuracy: 0.8991\n",
      "Epoch 132/200\n",
      "1050/1050 [==============================] - 1s 692us/step - loss: 0.1839 - accuracy: 0.9400 - val_loss: 0.2790 - val_accuracy: 0.8952\n",
      "Epoch 133/200\n",
      "1050/1050 [==============================] - 1s 711us/step - loss: 0.3354 - accuracy: 0.9100 - val_loss: 0.2743 - val_accuracy: 0.8984\n",
      "Epoch 134/200\n",
      "1050/1050 [==============================] - 1s 692us/step - loss: 0.2757 - accuracy: 0.8700 - val_loss: 0.2706 - val_accuracy: 0.8982\n",
      "Epoch 135/200\n",
      "1050/1050 [==============================] - 1s 750us/step - loss: 0.3543 - accuracy: 0.8700 - val_loss: 0.2798 - val_accuracy: 0.8983\n",
      "Epoch 136/200\n",
      "1050/1050 [==============================] - 1s 711us/step - loss: 0.2776 - accuracy: 0.8900 - val_loss: 0.2682 - val_accuracy: 0.8980\n",
      "Epoch 137/200\n",
      "1050/1050 [==============================] - 1s 699us/step - loss: 0.3827 - accuracy: 0.9000 - val_loss: 0.2857 - val_accuracy: 0.8926\n",
      "Epoch 138/200\n",
      "1050/1050 [==============================] - 1s 710us/step - loss: 0.2793 - accuracy: 0.8800 - val_loss: 0.3101 - val_accuracy: 0.8869\n",
      "Epoch 139/200\n",
      "1050/1050 [==============================] - 1s 733us/step - loss: 0.2147 - accuracy: 0.9400 - val_loss: 0.2748 - val_accuracy: 0.8952\n",
      "Epoch 140/200\n",
      "1050/1050 [==============================] - 1s 712us/step - loss: 0.2525 - accuracy: 0.9000 - val_loss: 0.2780 - val_accuracy: 0.8944\n",
      "Epoch 141/200\n",
      "1050/1050 [==============================] - 1s 682us/step - loss: 0.3171 - accuracy: 0.8600 - val_loss: 0.2727 - val_accuracy: 0.8992\n",
      "Epoch 142/200\n",
      "1050/1050 [==============================] - 1s 703us/step - loss: 0.2246 - accuracy: 0.9000 - val_loss: 0.2678 - val_accuracy: 0.9004\n",
      "Epoch 143/200\n",
      "1050/1050 [==============================] - 1s 696us/step - loss: 0.3899 - accuracy: 0.9200 - val_loss: 0.2716 - val_accuracy: 0.9000\n",
      "Epoch 144/200\n",
      "1050/1050 [==============================] - 1s 693us/step - loss: 0.2663 - accuracy: 0.8900 - val_loss: 0.2730 - val_accuracy: 0.8996\n",
      "Epoch 145/200\n",
      "1050/1050 [==============================] - 1s 721us/step - loss: 0.2883 - accuracy: 0.9000 - val_loss: 0.2694 - val_accuracy: 0.8979\n",
      "Epoch 146/200\n",
      "1050/1050 [==============================] - 1s 721us/step - loss: 0.4011 - accuracy: 0.9000 - val_loss: 0.2940 - val_accuracy: 0.8937\n",
      "Epoch 147/200\n",
      "1050/1050 [==============================] - 1s 716us/step - loss: 0.2291 - accuracy: 0.9200 - val_loss: 0.2706 - val_accuracy: 0.8981\n",
      "Epoch 148/200\n",
      "1050/1050 [==============================] - 1s 707us/step - loss: 0.2183 - accuracy: 0.9300 - val_loss: 0.2716 - val_accuracy: 0.8983\n",
      "Epoch 149/200\n",
      "1050/1050 [==============================] - 1s 750us/step - loss: 0.1732 - accuracy: 0.9100 - val_loss: 0.2694 - val_accuracy: 0.8999\n",
      "Epoch 150/200\n",
      "1050/1050 [==============================] - 1s 686us/step - loss: 0.2819 - accuracy: 0.8800 - val_loss: 0.2708 - val_accuracy: 0.8987\n",
      "Epoch 151/200\n",
      "1050/1050 [==============================] - 1s 726us/step - loss: 0.3385 - accuracy: 0.8800 - val_loss: 0.2678 - val_accuracy: 0.9003\n",
      "Epoch 152/200\n",
      "1050/1050 [==============================] - 1s 724us/step - loss: 0.2648 - accuracy: 0.8900 - val_loss: 0.2671 - val_accuracy: 0.9013\n",
      "Epoch 153/200\n",
      "1050/1050 [==============================] - 1s 733us/step - loss: 0.2603 - accuracy: 0.9100 - val_loss: 0.2701 - val_accuracy: 0.9010\n",
      "Epoch 154/200\n",
      "1050/1050 [==============================] - 1s 1ms/step - loss: 0.2247 - accuracy: 0.9000 - val_loss: 0.3043 - val_accuracy: 0.8874\n",
      "Epoch 155/200\n",
      "1050/1050 [==============================] - 1s 728us/step - loss: 0.2700 - accuracy: 0.8600 - val_loss: 0.2896 - val_accuracy: 0.8933\n",
      "Epoch 156/200\n",
      "1050/1050 [==============================] - 1s 718us/step - loss: 0.2386 - accuracy: 0.9200 - val_loss: 0.2680 - val_accuracy: 0.9010\n",
      "Epoch 157/200\n",
      "1050/1050 [==============================] - 1s 742us/step - loss: 0.2015 - accuracy: 0.9400 - val_loss: 0.2681 - val_accuracy: 0.8987\n",
      "Epoch 158/200\n",
      "1050/1050 [==============================] - 1s 720us/step - loss: 0.2307 - accuracy: 0.9400 - val_loss: 0.2970 - val_accuracy: 0.8920\n",
      "Epoch 159/200\n",
      "1050/1050 [==============================] - 1s 728us/step - loss: 0.2515 - accuracy: 0.9300 - val_loss: 0.2676 - val_accuracy: 0.8991\n",
      "Epoch 160/200\n",
      "1050/1050 [==============================] - 1s 693us/step - loss: 0.2374 - accuracy: 0.9300 - val_loss: 0.2799 - val_accuracy: 0.8930\n",
      "Epoch 161/200\n",
      "1050/1050 [==============================] - 1s 718us/step - loss: 0.2982 - accuracy: 0.8900 - val_loss: 0.3106 - val_accuracy: 0.8875\n",
      "Epoch 162/200\n",
      "1050/1050 [==============================] - 1s 733us/step - loss: 0.3347 - accuracy: 0.9100 - val_loss: 0.2706 - val_accuracy: 0.9006\n",
      "Epoch 163/200\n",
      "1050/1050 [==============================] - 1s 696us/step - loss: 0.3037 - accuracy: 0.8800 - val_loss: 0.2694 - val_accuracy: 0.8986\n",
      "Epoch 164/200\n",
      "1050/1050 [==============================] - 1s 711us/step - loss: 0.2337 - accuracy: 0.9500 - val_loss: 0.2665 - val_accuracy: 0.9017\n",
      "Epoch 165/200\n",
      "1050/1050 [==============================] - 1s 723us/step - loss: 0.2435 - accuracy: 0.9200 - val_loss: 0.2644 - val_accuracy: 0.9020\n",
      "Epoch 166/200\n",
      "1050/1050 [==============================] - 1s 714us/step - loss: 0.3407 - accuracy: 0.8700 - val_loss: 0.2788 - val_accuracy: 0.8971\n",
      "Epoch 167/200\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1050/1050 [==============================] - 1s 732us/step - loss: 0.1676 - accuracy: 0.9400 - val_loss: 0.2757 - val_accuracy: 0.8973\n",
      "Epoch 168/200\n",
      "1050/1050 [==============================] - 1s 721us/step - loss: 0.3100 - accuracy: 0.8900 - val_loss: 0.2727 - val_accuracy: 0.8980\n",
      "Epoch 169/200\n",
      "1050/1050 [==============================] - 1s 744us/step - loss: 0.2559 - accuracy: 0.9400 - val_loss: 0.2712 - val_accuracy: 0.9020\n",
      "Epoch 170/200\n",
      "1050/1050 [==============================] - 1s 748us/step - loss: 0.3812 - accuracy: 0.8600 - val_loss: 0.2751 - val_accuracy: 0.8990\n",
      "Epoch 171/200\n",
      "1050/1050 [==============================] - 1s 725us/step - loss: 0.1945 - accuracy: 0.9500 - val_loss: 0.2662 - val_accuracy: 0.9026\n",
      "Epoch 172/200\n",
      "1050/1050 [==============================] - 1s 704us/step - loss: 0.2435 - accuracy: 0.9200 - val_loss: 0.2733 - val_accuracy: 0.8958\n",
      "Epoch 173/200\n",
      "1050/1050 [==============================] - 1s 708us/step - loss: 0.1325 - accuracy: 0.9300 - val_loss: 0.2713 - val_accuracy: 0.8993\n",
      "Epoch 174/200\n",
      "1050/1050 [==============================] - 1s 723us/step - loss: 0.2293 - accuracy: 0.8800 - val_loss: 0.2663 - val_accuracy: 0.8994\n",
      "Epoch 175/200\n",
      "1050/1050 [==============================] - 1s 699us/step - loss: 0.2207 - accuracy: 0.9200 - val_loss: 0.2761 - val_accuracy: 0.8968\n",
      "Epoch 176/200\n",
      "1050/1050 [==============================] - 1s 753us/step - loss: 0.3894 - accuracy: 0.9000 - val_loss: 0.2692 - val_accuracy: 0.9021\n",
      "Epoch 177/200\n",
      "1050/1050 [==============================] - 1s 751us/step - loss: 0.2255 - accuracy: 0.9000 - val_loss: 0.2656 - val_accuracy: 0.9022\n",
      "Epoch 178/200\n",
      "1050/1050 [==============================] - 1s 735us/step - loss: 0.3192 - accuracy: 0.8900 - val_loss: 0.2628 - val_accuracy: 0.9034\n",
      "Epoch 179/200\n",
      "1050/1050 [==============================] - 1s 743us/step - loss: 0.2670 - accuracy: 0.9300 - val_loss: 0.2657 - val_accuracy: 0.9013\n",
      "Epoch 180/200\n",
      "1050/1050 [==============================] - 1s 755us/step - loss: 0.2596 - accuracy: 0.9000 - val_loss: 0.2700 - val_accuracy: 0.8975\n",
      "Epoch 181/200\n",
      "1050/1050 [==============================] - 1s 759us/step - loss: 0.1899 - accuracy: 0.9200 - val_loss: 0.2653 - val_accuracy: 0.8983\n",
      "Epoch 182/200\n",
      "1050/1050 [==============================] - 1s 781us/step - loss: 0.2341 - accuracy: 0.9100 - val_loss: 0.2771 - val_accuracy: 0.8966\n",
      "Epoch 183/200\n",
      "1050/1050 [==============================] - 1s 753us/step - loss: 0.1717 - accuracy: 0.9500 - val_loss: 0.2744 - val_accuracy: 0.8978\n",
      "Epoch 184/200\n",
      "1050/1050 [==============================] - 1s 780us/step - loss: 0.1670 - accuracy: 0.9500 - val_loss: 0.2816 - val_accuracy: 0.8945\n",
      "Epoch 185/200\n",
      "1050/1050 [==============================] - 1s 739us/step - loss: 0.2888 - accuracy: 0.8700 - val_loss: 0.2671 - val_accuracy: 0.8999\n",
      "Epoch 186/200\n",
      "1050/1050 [==============================] - 1s 731us/step - loss: 0.1749 - accuracy: 0.9300 - val_loss: 0.2824 - val_accuracy: 0.8931\n",
      "Epoch 187/200\n",
      "1050/1050 [==============================] - 1s 771us/step - loss: 0.2501 - accuracy: 0.9200 - val_loss: 0.2663 - val_accuracy: 0.8991\n",
      "Epoch 188/200\n",
      "1050/1050 [==============================] - 1s 765us/step - loss: 0.1479 - accuracy: 0.9400 - val_loss: 0.2637 - val_accuracy: 0.9032\n",
      "Epoch 189/200\n",
      "1050/1050 [==============================] - 1s 716us/step - loss: 0.2322 - accuracy: 0.9200 - val_loss: 0.2670 - val_accuracy: 0.8995\n",
      "Epoch 190/200\n",
      "1050/1050 [==============================] - 1s 768us/step - loss: 0.2288 - accuracy: 0.9100 - val_loss: 0.2703 - val_accuracy: 0.9028\n",
      "Epoch 191/200\n",
      "1050/1050 [==============================] - 1s 750us/step - loss: 0.2404 - accuracy: 0.9400 - val_loss: 0.2722 - val_accuracy: 0.9002\n",
      "Epoch 192/200\n",
      "1050/1050 [==============================] - 1s 773us/step - loss: 0.3203 - accuracy: 0.8900 - val_loss: 0.2717 - val_accuracy: 0.8996\n",
      "Epoch 193/200\n",
      "1050/1050 [==============================] - 1s 758us/step - loss: 0.2062 - accuracy: 0.9200 - val_loss: 0.2667 - val_accuracy: 0.8969\n",
      "Epoch 194/200\n",
      "1050/1050 [==============================] - 1s 730us/step - loss: 0.2833 - accuracy: 0.8900 - val_loss: 0.2743 - val_accuracy: 0.8995\n",
      "Epoch 195/200\n",
      "1050/1050 [==============================] - 1s 774us/step - loss: 0.3891 - accuracy: 0.8200 - val_loss: 0.2896 - val_accuracy: 0.8944\n",
      "Epoch 196/200\n",
      "1050/1050 [==============================] - 1s 727us/step - loss: 0.2392 - accuracy: 0.9200 - val_loss: 0.2682 - val_accuracy: 0.8989\n",
      "Epoch 197/200\n",
      "1050/1050 [==============================] - 1s 750us/step - loss: 0.2381 - accuracy: 0.9100 - val_loss: 0.2697 - val_accuracy: 0.8971\n",
      "Epoch 198/200\n",
      "1050/1050 [==============================] - 1s 779us/step - loss: 0.3365 - accuracy: 0.9000 - val_loss: 0.2643 - val_accuracy: 0.9033\n",
      "Epoch 199/200\n",
      "1050/1050 [==============================] - 1s 777us/step - loss: 0.2081 - accuracy: 0.9000 - val_loss: 0.2656 - val_accuracy: 0.9015\n",
      "Epoch 200/200\n",
      "1050/1050 [==============================] - 1s 749us/step - loss: 0.2295 - accuracy: 0.9100 - val_loss: 0.2617 - val_accuracy: 0.9042\n"
     ]
    }
   ],
   "source": [
    "from cvnn.cvnn_model import CvnnModel\n",
    "from tensorflow.keras.losses import categorical_crossentropy\n",
    "\n",
    "complex_network = CvnnModel(name=\"complex_network\", shape=shape, loss_fun=categorical_crossentropy, optimizer='sgd', verbose=False, tensorboard=False)\n",
    "complex_network.fit(dataset.x, dataset.y, validation_data = (x_val.astype(np.complex64), y_val), epochs = 200, batch_size=100, verbose=2, save_csv_history=True)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(1311618,)"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "prediction = complex_network.predict(T.astype(np.complex64)).numpy()\n",
    "prediction.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "prediction_image = np.zeros(raw_labels.shape, dtype=int)\n",
    "p_index = 0\n",
    "for i in range(raw_labels.shape[0]):\n",
    "    for j in range(raw_labels.shape[1]):\n",
    "        if raw_labels[i, j] != 0:\n",
    "            prediction_image[i, j] = prediction[p_index] + 1\n",
    "            p_index += 1\n",
    "assert p_index == len(prediction)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": [
       "<Figure size 432x288 with 0 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "show_ground_truth(prediction_image, \"./\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Test Accuracy: 91.53%; Loss: 0.2493\n"
     ]
    }
   ],
   "source": [
    "loss, acc = complex_network.evaluate(x_test.astype(np.complex64), y_test)\n",
    "print(\"Test Accuracy: {0:.2%}; Loss: {1:.4}\".format(acc, loss))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Predicted</th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>2</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Actual</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>234362</td>\n",
       "      <td>26413</td>\n",
       "      <td>23556</td>\n",
       "      <td>284331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>13439</td>\n",
       "      <td>189142</td>\n",
       "      <td>372</td>\n",
       "      <td>202953</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>34289</td>\n",
       "      <td>1708</td>\n",
       "      <td>657177</td>\n",
       "      <td>693174</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>282090</td>\n",
       "      <td>217263</td>\n",
       "      <td>681105</td>\n",
       "      <td>1180458</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Predicted       0       1       2      All\n",
       "Actual                                    \n",
       "0          234362   26413   23556   284331\n",
       "1           13439  189142     372   202953\n",
       "2           34289    1708  657177   693174\n",
       "All        282090  217263  681105  1180458"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "complex_network.get_confusion_matrix(x_test.astype(np.complex64), y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}